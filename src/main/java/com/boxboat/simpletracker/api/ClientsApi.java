/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.boxboat.simpletracker.api;

import com.boxboat.simpletracker.model.Client;
import com.boxboat.simpletracker.model.ClientsPostRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-07T14:16:30.773327-08:00[America/Los_Angeles]")
@Validated
@Tag(name = "clients", description = "the clients API")
public interface ClientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /clients/{clientId} : Delete a client by ID
     *
     * @param clientId Numeric ID of the client (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdDelete",
        summary = "Delete a client by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/{clientId}"
    )
    default ResponseEntity<Void> clientsClientIdDelete(
        @Parameter(name = "clientId", description = "Numeric ID of the client", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients/{clientId} : Get a client by ID
     *
     * @param clientId Numeric ID of the client (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdGet",
        summary = "Get a client by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{clientId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Client> clientsClientIdGet(
        @Parameter(name = "clientId", description = "Numeric ID of the client", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /clients/{clientId} : Update a client by ID
     *
     * @param clientId Numeric ID of the client (required)
     * @param clientsPostRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdPut",
        summary = "Update a client by ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/{clientId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Client> clientsClientIdPut(
        @Parameter(name = "clientId", description = "Numeric ID of the client", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId,
        @Parameter(name = "ClientsPostRequest", description = "", required = true) @Valid @RequestBody ClientsPostRequest clientsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients : Get all clients
     * Retrieves all clients
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clientsGet",
        summary = "Get all clients",
        description = "Retrieves all clients",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Client.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Client>> clientsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"name\", \"id\" : 0, \"url\" : \"url\" }, { \"name\" : \"name\", \"id\" : 0, \"url\" : \"url\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clients : Create new client
     * Add a new client with given name and url
     *
     * @param clientsPostRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "clientsPost",
        summary = "Create new client",
        description = "Add a new client with given name and url",
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Client> clientsPost(
        @Parameter(name = "ClientsPostRequest", description = "", required = true) @Valid @RequestBody ClientsPostRequest clientsPostRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"name\", \"id\" : 0, \"url\" : \"url\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
